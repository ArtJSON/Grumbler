// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    displayName   String?
    name          String?   @unique
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    posts        Post[]
    comments     Comment[]
    commentLikes CommentLike[]
    postLikes    PostLike[]
    forwards     Forward[]

    followedBy User[] @relation("UserFollows")
    following  User[] @relation("UserFollows")
}

model Comment {
    id          String        @id @default(cuid())
    createdAt   DateTime      @default(now())
    user        User          @relation(fields: [id], references: [id], onDelete: Cascade)
    post        Post          @relation(fields: [id], references: [id], onDelete: Cascade)
    commentLike CommentLike[]
}

model CommentLike {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    user      User     @relation(fields: [id], references: [id], onDelete: Cascade)
    comment   Comment  @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Post {
    id              String     @id @default(cuid())
    createdAt       DateTime   @default(now())
    user            User       @relation(fields: [id], references: [id], onDelete: Cascade)
    views           Int
    content         String
    // media String // TODO: add a field that is used to store photos/videos data (cloudinary)
    extendedContent String?
    comments        Comment[]
    postLikes       PostLike[]
    forwards        Forward[]
    hashtags        Hashtag[]
}

model Hashtag {
    id    String @id
    posts Post[]
}

model PostLike {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    user      User     @relation(fields: [id], references: [id], onDelete: Cascade)
    post      Post     @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Forward {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    user      User     @relation(fields: [id], references: [id], onDelete: Cascade)
    post      Post     @relation(fields: [id], references: [id], onDelete: Cascade)
}
